// <auto-generated/>

using System;

namespace TestNamespace;

#nullable enable
#pragma warning disable CS0109  // the member does not hide an inherited member.

partial class Bravo
{
    /// <summary>
    /// Transforms the NonNullableString value before assigning the value to the target.
    /// </summary>
    static partial void UpdateFromTransform_NonNullableString(ref string value);

    /// <summary>
    /// Transforms the NullableString value before assigning the value to the target.
    /// </summary>
    static partial void UpdateFromTransform_NullableString(ref string? value);

    /// <summary>
    /// Method to run before the UpdateFrom method begins copying values.
    /// </summary>
    partial void BeforeUpdateFrom(Bravo source, ref int changeCount);

    /// <summary>
    /// Method to run after the UpdateFrom method finishes copying values.
    /// </summary>
    partial void AfterUpdateFrom(Bravo source, ref int changeCount);

    /// <summary>
    /// Updates properties from the source object to this object and returns the number of changes.
    /// </summary>
    public new int UpdateFrom(Bravo source)
    {
        if (ReferenceEquals(null, source)) throw new ArgumentNullException();
        if (ReferenceEquals(this, source)) return 0;
        var changeCount = 0;
        BeforeUpdateFrom(source, ref changeCount);
        var this_NonNullableString = this.NonNullableString;
        var source_NonNullableString = source.NonNullableString;
        UpdateFromTransform_NonNullableString(ref source_NonNullableString);
        if (!ReferenceEquals(this_NonNullableString, source_NonNullableString) && (ReferenceEquals(null, this_NonNullableString) || !this_NonNullableString.Equals(source_NonNullableString))) {
            this.NonNullableString = source_NonNullableString;
            changeCount++;
        }
        var this_NullableString = this.NullableString;
        var source_NullableString = source.NullableString;
        UpdateFromTransform_NullableString(ref source_NullableString);
        if (!ReferenceEquals(this_NullableString, source_NullableString) && (ReferenceEquals(null, this_NullableString) || (!ReferenceEquals(null, this_NullableString) && !this_NullableString.Equals(source_NullableString)))) {
            this.NullableString = source_NullableString;
            changeCount++;
        }
        AfterUpdateFrom(source, ref changeCount);
        return changeCount;
    }
}
