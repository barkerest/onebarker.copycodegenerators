using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace OneBarker.CopyCodeGenerators
{
    [Generator]
    public class SkipPropertySourceGenerator : IIncrementalGenerator
    {
        private const  string Namespace         = "Generators";
        internal const string AttributeName     = "SkipOnCopyAttribute";
        internal const string ShortName         = "SkipOnCopy";
        internal const string FullAttributeName = Namespace + "." + AttributeName;

        internal static bool IsAttribute(INamedTypeSymbol symbol)
        {
            var name = symbol.Name;
            if (string.IsNullOrEmpty(name)) return false;
            return FullAttributeName.Equals(name) ||
                   AttributeName.Equals(name)     ||
                   (symbol is IErrorTypeSymbol && ShortName.Equals(name));
        }
        
        private const string AttributeSourceCode = @"// <auto-generated/>

using System;

namespace " + Namespace + @"
{
    /// <summary>
    /// Marks the property or field to be ignored by the copy code. 
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple = false)]
    internal class " + AttributeName + @" : Attribute
    {
    }
}";

        
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Add the marker attribute to the compilation.
            context.RegisterPostInitializationOutput(
                ctx => ctx.AddSource(
                    $"{AttributeName}.g.cs",
                    SourceText.From(AttributeSourceCode, Encoding.UTF8)
                )
            );
        }
    }
}
