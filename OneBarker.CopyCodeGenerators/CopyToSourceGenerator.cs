using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace OneBarker.CopyCodeGenerators
{
    [Generator]
    public class CopyToSourceGenerator : IIncrementalGenerator
    {
        private const string Namespace     = "Generators";
        private const string AttributeName = "EnableCopyToAttribute";

        private const string AttributeSourceCode = @"// <auto-generated/>

using System;

namespace " + Namespace + @"
{
    /// <summary>
    /// Generates a CopyTo method taking the provided TargetType as an argument. 
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, AllowMultiple = true)]
    internal class " + AttributeName + @" : Attribute
    {
        public Type TargetType { get; }
        
        public " + AttributeName + @"(Type targetType)
        {
            TargetType = targetType;
        }
    }
}";

        private const string FullAttributeName = Namespace + "." + AttributeName;

        private readonly CopyCodeGenerator _generator = new CopyCodeGenerator(
            (target, source, param, set)
                => $"public new {target} CopyTo({source} {param})",
            (target, source, set)
                => "Copies properties from this object to the target object and returns the target object.",
            "CopyTo",
            CopyCodeGenerator.MethodReturnType.Source,
            addBeforeMethod: true,
            addAfterMethod: true,
            swapSourceAndTarget: true
        );

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Add the marker attribute to the compilation.
            context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
                    $"{AttributeName}.g.cs",
                    SourceText.From(AttributeSourceCode, Encoding.UTF8)
                )
            );

            // Filter classes annotated with the attribute. Only filtered Syntax Nodes can trigger code generation.
            var provider = context.SyntaxProvider
                                  .CreateSyntaxProvider(
                                      (s,   _) => s is ClassDeclarationSyntax || s is StructDeclarationSyntax,
                                      (ctx, _) => ctx.GetCopyClassDeclarationSetForSourceGen(FullAttributeName)
                                  )
                                  .Where(t => t.AttributeFound)
                                  .Select((t, _) => t);

            // Generate the source code.
            context.RegisterSourceOutput(
                context.CompilationProvider.Combine(provider.Collect()),
                (ctx, t) => _generator.Generate(ctx, t.Left, t.Right)
            );
        }
    }
}
